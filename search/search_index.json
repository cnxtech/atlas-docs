{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Atlas \u00b6 Warning These docs are still a work in progress. For now you should still refer to the Atlas Wiki . Atlas was developed by Netflix to manage dimensional time series data for near real-time operational insight. Atlas features in-memory data storage, allowing it to gather and report very large numbers of metrics, very quickly. Atlas captures operational intelligence. Whereas business intelligence is data gathered for analyzing trends over time, operational intelligence provides a picture of what is currently happening within a system. Atlas was built because the existing systems Netflix was using for operational intelligence were not able to cope with the increase in metrics we were seeing as we expanded our operations in the cloud. In 2011, we were monitoring 2 million metrics related to our streaming systems. By 2014, we were at 1.2 billion metrics and the numbers continue to rise. Atlas is designed to handle this large quantity of data and can scale with the hardware we use to analyze and store it. For details and background on the project please read through the [[overview]] page. Check out the [[getting started]] page for an introduction to using Atlas in the cloud environment. Once you've explored the example, check out the stack language references to see the various types of information you can access.","title":"Home"},{"location":"#atlas","text":"Warning These docs are still a work in progress. For now you should still refer to the Atlas Wiki . Atlas was developed by Netflix to manage dimensional time series data for near real-time operational insight. Atlas features in-memory data storage, allowing it to gather and report very large numbers of metrics, very quickly. Atlas captures operational intelligence. Whereas business intelligence is data gathered for analyzing trends over time, operational intelligence provides a picture of what is currently happening within a system. Atlas was built because the existing systems Netflix was using for operational intelligence were not able to cope with the increase in metrics we were seeing as we expanded our operations in the cloud. In 2011, we were monitoring 2 million metrics related to our streaming systems. By 2014, we were at 1.2 billion metrics and the numbers continue to rise. Atlas is designed to handle this large quantity of data and can scale with the hardware we use to analyze and store it. For details and background on the project please read through the [[overview]] page. Check out the [[getting started]] page for an introduction to using Atlas in the cloud environment. Once you've explored the example, check out the stack language references to see the various types of information you can access.","title":"Atlas"},{"location":"api/fetch/","text":"","title":"Fetch"},{"location":"api/graph/","text":"","title":"Graph"},{"location":"api/tags/","text":"","title":"Tags"},{"location":"asl/alerting-expressions/","text":"The stack language provides some basic techniques to convert an input line into a set of signals that can be used to trigger and visualize alert conditions. This section assumes a familiarity with the stack language and the alerting philosophy Threshold Alerts \u00b6 To start we need an input metric. For this example the input will be a sample metric showing high CPU usage for a period: /api/v1/graph?s=e-3h&e=2012-01-01T07:00&tz=UTC&l=0&h=100&q=nf.app,alerttest,:eq,name,ssCpuUser,:eq,:and,:sum Lets say we want to trigger an alert when the CPU usage goes above 80%. To do that simply use the :gt operator and append 80,:gt to the query: /api/v1/graph?s=e-3h&e=2012-01-01T07:00&tz=UTC&l=0&h=100&q=nf.app,alerttest,:eq,name,ssCpuUser,:eq,:and,:sum,80,:gt The result is a signal line that is non-zero, typically 1, when in a triggering state and zero when everything is fine. Dampening \u00b6 Our threshold alert above will trigger if the CPU usage is ever recorded to be above the threshold. Alert conditions are often combined with a check for the number of occurences. This is done by using the :rolling-count operator to get a line showing how many times the input signal has been true withing a specified window and then applying a second threshold to the rolling count. Input Rolling count Dampened signal nf.app,alerttest, :eq , name,ssCpuUser, :eq , :and , :sum , 80, :gt nf.app,alerttest, :eq , name,ssCpuUser, :eq , :and , :sum , 80, :gt , 5, :rolling-count nf.app,alerttest, :eq , name,ssCpuUser, :eq , :and , :sum , 80, :gt , 5, :rolling-count , 4, :gt Visualization \u00b6 A signal line is useful to tell whether or not something is in a triggered state, but can be difficult for a person to follow. Alert expressions can be visualized by showing the input, threshold, and triggering state on the same graph. /api/v1/graph?s=e-3h&e=2012-01-01T07:00&tz=UTC&l=0&h=100&q=nf.app,alerttest,:eq,name,ssCpuUser,:eq,:and,:sum,80,:2over,:gt,:vspan,40,:alpha,triggered,:legend,:rot,input,:legend,:rot,threshold,:legend,:rot Summary \u00b6 You should now know the basics of crafting an alert expression using the stack language. Other topics that may be of interest: Alerting Philosophy : overview of best practices associated with alerts. Stack Language Reference : comprehensive list of avialable operators. DES : double exponential smoothing. A technique for detecting anomalies in normally clean input signals where a precise threshold is unknown. For example, the requests per second hitting a service.","title":"Alerting Expressions"},{"location":"asl/alerting-expressions/#threshold-alerts","text":"To start we need an input metric. For this example the input will be a sample metric showing high CPU usage for a period: /api/v1/graph?s=e-3h&e=2012-01-01T07:00&tz=UTC&l=0&h=100&q=nf.app,alerttest,:eq,name,ssCpuUser,:eq,:and,:sum Lets say we want to trigger an alert when the CPU usage goes above 80%. To do that simply use the :gt operator and append 80,:gt to the query: /api/v1/graph?s=e-3h&e=2012-01-01T07:00&tz=UTC&l=0&h=100&q=nf.app,alerttest,:eq,name,ssCpuUser,:eq,:and,:sum,80,:gt The result is a signal line that is non-zero, typically 1, when in a triggering state and zero when everything is fine.","title":"Threshold Alerts"},{"location":"asl/alerting-expressions/#dampening","text":"Our threshold alert above will trigger if the CPU usage is ever recorded to be above the threshold. Alert conditions are often combined with a check for the number of occurences. This is done by using the :rolling-count operator to get a line showing how many times the input signal has been true withing a specified window and then applying a second threshold to the rolling count. Input Rolling count Dampened signal nf.app,alerttest, :eq , name,ssCpuUser, :eq , :and , :sum , 80, :gt nf.app,alerttest, :eq , name,ssCpuUser, :eq , :and , :sum , 80, :gt , 5, :rolling-count nf.app,alerttest, :eq , name,ssCpuUser, :eq , :and , :sum , 80, :gt , 5, :rolling-count , 4, :gt","title":"Dampening"},{"location":"asl/alerting-expressions/#visualization","text":"A signal line is useful to tell whether or not something is in a triggered state, but can be difficult for a person to follow. Alert expressions can be visualized by showing the input, threshold, and triggering state on the same graph. /api/v1/graph?s=e-3h&e=2012-01-01T07:00&tz=UTC&l=0&h=100&q=nf.app,alerttest,:eq,name,ssCpuUser,:eq,:and,:sum,80,:2over,:gt,:vspan,40,:alpha,triggered,:legend,:rot,input,:legend,:rot,threshold,:legend,:rot","title":"Visualization"},{"location":"asl/alerting-expressions/#summary","text":"You should now know the basics of crafting an alert expression using the stack language. Other topics that may be of interest: Alerting Philosophy : overview of best practices associated with alerts. Stack Language Reference : comprehensive list of avialable operators. DES : double exponential smoothing. A technique for detecting anomalies in normally clean input signals where a precise threshold is unknown. For example, the requests per second hitting a service.","title":"Summary"},{"location":"asl/eq/","text":"","title":"eq"},{"location":"asl/tutorial/","text":"","title":"Tutorial"},{"location":"spectator/","text":"","title":"Overview"},{"location":"spectator/counter/","text":"","title":"Counters"},{"location":"spectator/java/counter/","text":"","title":"Counters"},{"location":"spectator/js/counter/","text":"","title":"Counters"}]}